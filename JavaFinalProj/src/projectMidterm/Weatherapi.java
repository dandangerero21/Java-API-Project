package projectMidterm;

import org.json.JSONObject;
import org.json.JSONArray;
import java.awt.EventQueue;
import java.net.HttpURLConnection;
import java.net.URL;

import org.openstreetmap.gui.jmapviewer.*;
import org.openstreetmap.gui.jmapviewer.interfaces.ICoordinate;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;

import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JSeparator;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.Image;
import javax.swing.SpringLayout;
import javax.swing.SwingWorker;
import javax.swing.JPanel;
import javax.swing.ImageIcon;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Properties;

public class Weatherapi {
	
    String MyAPIKey = "";
	String API_url = "https://api.openweathermap.org/data/2.5/weather?";
	String reversegeourl = "http://api.openweathermap.org/geo/1.0/reverse?lat=";
	String geourl = "http://api.openweathermap.org/geo/1.0/direct?q=";
	String loadingurlstring = "https://i.pinimg.com/originals/25/ef/28/25ef280441ad6d3a5ccf89960b4e95eb.gif";
	String urlstring;
	String geourlend = "";
	JSONObject jsonObject;
	
	JFrame frame;
	JTextField location;
	Double lon, lat;
	String country, locationName;
	String geoUrl;
	Boolean isMap = false;
	StringBuilder response;
	
	
	ICoordinate coord;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Weatherapi window = new Weatherapi();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public Weatherapi() {
		try {
		Properties props = new Properties();
		props.load(new FileInputStream("config.properties"));
		MyAPIKey = props.getProperty("apiKey");
		geourlend = "&appid=" + MyAPIKey;
	} catch (IOException e) {
		e.printStackTrace();
	}
		initialize();
	}

	private void initialize() {
		
		//ang mga following block of codes ay para sa windowbuilder natin. autogenerated sila lahat
		frame = new JFrame("Weather API App");
		frame.setResizable(false);
		frame.setBounds(100, 100, 529, 357);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		JLabel loadingLabel = new JLabel("");
		loadingLabel.setBounds(274, 100, 229, 150);
		frame.getContentPane().add(loadingLabel);
		
		JLabel pinpointnamelabel = new JLabel("Location");
		pinpointnamelabel.setBounds(10, 10, 158, 20);
		pinpointnamelabel.setFont(new Font("Tahoma", Font.PLAIN, 16));
		frame.getContentPane().add(pinpointnamelabel);
		
		JLabel countrylabel = new JLabel("Country");
		countrylabel.setBounds(10, 36, 158, 14);
		frame.getContentPane().add(countrylabel);
		
		JSeparator separator = new JSeparator();
		separator.setBounds(0, 260, 517, 2);
		frame.getContentPane().add(separator);
		
		location = new JTextField(20);
		location.setBounds(10, 284, 138, 23);
		location.setColumns(10);
		frame.getContentPane().add(location);
		
		JButton btnNewButton = new JButton("Fetch Weather");
		btnNewButton.setBounds(150, 284, 120, 23);
		
		//MAY DEFAULT BUTTON NA PAG NAG ENTER, MAGCCLICK ANG btnNewButton
		frame.getRootPane().setDefaultButton(btnNewButton);
		frame.getContentPane().add(btnNewButton);
		
		JPanel panel = new JPanel();
		panel.setBounds(274, 10, 229, 82);
		frame.getContentPane().add(panel);
		SpringLayout sl_panel = new SpringLayout();
		panel.setLayout(sl_panel);
		
		JLabel mainweatherlabel = new JLabel("Current Condition");
		sl_panel.putConstraint(SpringLayout.EAST, mainweatherlabel, -10, SpringLayout.EAST, panel);
		panel.add(mainweatherlabel);
		
		JLabel descLabel = new JLabel("Description");
		sl_panel.putConstraint(SpringLayout.NORTH, descLabel, 6, SpringLayout.SOUTH, mainweatherlabel);
		sl_panel.putConstraint(SpringLayout.EAST, descLabel, -10, SpringLayout.EAST, panel);
		panel.add(descLabel);
		
		JLabel lblWeather = new JLabel("WEATHER");
		sl_panel.putConstraint(SpringLayout.NORTH, mainweatherlabel, 6, SpringLayout.SOUTH, lblWeather);
		sl_panel.putConstraint(SpringLayout.NORTH, lblWeather, 0, SpringLayout.NORTH, panel);
		sl_panel.putConstraint(SpringLayout.EAST, lblWeather, -75, SpringLayout.EAST, panel);
		lblWeather.setFont(new Font("Verdana", Font.BOLD, 11));
		panel.add(lblWeather);
		
		JPanel panel_1 = new JPanel();
		panel_1.setBounds(10, 55, 260, 108);
		frame.getContentPane().add(panel_1);
		panel_1.setLayout(null);
		
		JLabel mintempLabel = new JLabel("Minimum Temp:");
		mintempLabel.setBounds(134, 24, 151, 15);
		panel_1.add(mintempLabel);
		
		JLabel humidityLabel_1 = new JLabel("Humidity:");
		humidityLabel_1.setBounds(0, 64, 140, 15);
		panel_1.add(humidityLabel_1);
		
		JLabel feelslikelabel = new JLabel("Feels like:");
		feelslikelabel.setBounds(0, 44, 140, 15);
		panel_1.add(feelslikelabel);
		
		JLabel lblMain = new JLabel("MAIN");
		lblMain.setBounds(109, 4, 34, 15);
		lblMain.setFont(new Font("Verdana", Font.BOLD, 11));
		panel_1.add(lblMain);
		
		JLabel temperatureLabel_1 = new JLabel("Temperature:");
		temperatureLabel_1.setBounds(0, 24, 140, 15);
		panel_1.add(temperatureLabel_1);
		
		JLabel maxtempLabel = new JLabel("Maximum Temp:");
		maxtempLabel.setBounds(134, 44, 151, 15);
		panel_1.add(maxtempLabel);
		
		JLabel seaLevellabel = new JLabel("Sea Level:");
		seaLevellabel.setBounds(134, 64, 151, 14);
		panel_1.add(seaLevellabel);
		
		JLabel imageLabel = new JLabel("");
		imageLabel.setBounds(353, 106, 150, 150);
		frame.getContentPane().add(imageLabel);
		
		JPanel panel_2 = new JPanel();
		panel_2.setBounds(10, 174, 150, 82);
		frame.getContentPane().add(panel_2);
		SpringLayout sl_panel_2 = new SpringLayout();
		panel_2.setLayout(sl_panel_2);
		
		JLabel lblNewLabel = new JLabel("WIND");
		sl_panel_2.putConstraint(SpringLayout.NORTH, lblNewLabel, 0, SpringLayout.NORTH, panel_2);
		sl_panel_2.putConstraint(SpringLayout.WEST, lblNewLabel, 56, SpringLayout.WEST, panel_2);
		sl_panel_2.putConstraint(SpringLayout.EAST, lblNewLabel, -58, SpringLayout.EAST, panel_2);
		lblNewLabel.setFont(new Font("Verdana", Font.BOLD, 11));
		panel_2.add(lblNewLabel);
		
		JLabel windspeedLabel = new JLabel("Wind speed:");
		sl_panel_2.putConstraint(SpringLayout.NORTH, windspeedLabel, 17, SpringLayout.NORTH, panel_2);
		sl_panel_2.putConstraint(SpringLayout.WEST, windspeedLabel, 0, SpringLayout.WEST, panel_2);
		sl_panel_2.putConstraint(SpringLayout.SOUTH, lblNewLabel, -3, SpringLayout.NORTH, windspeedLabel);
		panel_2.add(windspeedLabel);
		
		JLabel winddegLabel = new JLabel("Wind direction:");
		sl_panel_2.putConstraint(SpringLayout.NORTH, winddegLabel, 7, SpringLayout.SOUTH, windspeedLabel);
		sl_panel_2.putConstraint(SpringLayout.WEST, winddegLabel, 0, SpringLayout.WEST, windspeedLabel);
		panel_2.add(winddegLabel);
		
		JLabel lblNewLabel_1 = new JLabel("Quick Search");
		lblNewLabel_1.setBounds(10, 267, 89, 14);
		frame.getContentPane().add(lblNewLabel_1);
		
		// bagong frame para sa map container natin
		JFrame mapframe = new JFrame("Choose Location");
		mapframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		mapframe.setSize(800, 600);
		
		//jmapviewer. included sa jmapviewer.jar natin. nag aallow na magshow ng map para sa more precise location
		JMapViewer map = new JMapViewer();
		
		map.setTileSource(new OsmTileSource.TransportMap());
		mapframe.getContentPane().add(map);
		
		//mouselistener para sa pagkuha ng data.
		
		map.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				// sa map, pag nagclick ka ay may lalabas na mapmarker. kukunin natin yung longitude at latitude ng pinned place at gagamitin natin sa reverse geooding
				coord = map.getPosition(e.getX(), e.getY());
				System.out.println("Clicked at: " + coord.getLat() + ", " + coord.getLon());
				
				Layer layer = new Layer("Markers");
				map.addMapMarker(new MapMarkerDot(layer, coord.getLat(), coord.getLon()));
				
				map.removeAllMapMarkers();
				MapMarkerDot marker = new MapMarkerDot(coord.getLat(), coord.getLon());
				map.addMapMarker(marker);
				
				//itrue ang ismap para malaman ng program na gumamit tayo ng tilemap
				isMap = true;
				//doClick para matrigger ang pagclick ng "seaarch location". then icclose ang map para makita ang result
				btnNewButton.doClick();
				mapframe.setVisible(false);			}
		});

		
		JButton showmapButton = new JButton("Open Map");
		showmapButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//another actionlistener. magsshow ang map pag cinlick yung Open Map button
				mapframe.setVisible(true);
			}
		});
		showmapButton.setBounds(414, 284, 89, 23);
		frame.getContentPane().add(showmapButton);
		
		btnNewButton.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {

		    	//dito isesetvisible natin yung loading gif.
		        loadingLabel.setVisible(true);
		        loadingLabel.setIcon(new ImageIcon(new ImageIcon("imagersc/hzk6C.gif").getImage().getScaledInstance(229, 150, Image.SCALE_DEFAULT)));

		        //swingworker, sa java, ay inaallow na makapag execute ng codes in the background. dahil sa swingworker, makakapagshow muna ako ng loading gif hanggang sa ready na ipakita ang json data natin. the reason na nilagay namin sa actionlistener ang swingworker ay dahil isang beses lang sya maeexecute pag wala sya dun. basically every time na cinlick namin ang button, gumagawa sya ng bagong swingworker dahil nilagay namin sya sa actionlistener. void dahil wala tayo irereturn na value.
		        SwingWorker<Void ,Void> worker = new SwingWorker<Void, Void>() {

		        	
		        	//@Override ay para magbigay tayo ng specific implementation ng method na provided na ng SwingWorker. sa doInBackground (default method ng SwingWorker) natin ilalagay yung mga methods and code na gusto nating gawin sa background para hindi masyado maglag and mas maayos tingnan dahil pwede tayo magpakita ng ibang things habang di pa tapos yung ginagawa sa background
		            @Override
		            protected Void doInBackground() throws Exception {
		                try {
		                    // check kung map ba o sa text field ang kukunin. pag nadetect na gumamit ng map (using isMap), magrereverse geocoding ang program. otherwise, mag dedefault geocoding lang pag di gumamit
		                    if(isMap) {
		                        lon = coord.getLon();
		                        lat = coord.getLat();
		                        geoUrl = reversegeourl + lat + "&lon=" + lon + geourlend;
		                    } else {
		                        //kuha ng location from JTextField
		                    	String preferredplace = "";
		                    	for(int i = 0; i < location.getText().length(); i++) {
		                    		if(location.getText().charAt(i) == ' ') {
		                    			preferredplace += "+";
		                    		} else {
		                    		preferredplace += location.getText().charAt(i);
		                    		}
		                    	}
		                        if (preferredplace.isEmpty()) { // check kung walang input
		                        	JOptionPane.showMessageDialog(frame, "Location cannot be empty!", "Error!", JOptionPane.INFORMATION_MESSAGE);
		                        } else {
		                        	geoUrl = geourl + preferredplace + geourlend;
		                        }
		                    }
		                    
		                    //method call para sa api response natin
		                    apiconnection(geoUrl);

		                    JSONArray arr = new JSONArray(response.toString());
		                    if (arr.length() == 0) { // check kung empty yung array na binigay ng API
	                        	JOptionPane.showMessageDialog(frame, "Invalid location!", "Error!", JOptionPane.INFORMATION_MESSAGE);
		                    } else {

			                    JSONObject name = arr.getJSONObject(0);
	
			                    if(isMap) {
			                        lon = coord.getLon();
			                        lat = coord.getLat();
			                    } else {
			                        lat = name.getDouble("lat");
			                        lon = name.getDouble("lon");
			                    }
	
			                    urlstring = API_url + "lon=" + lon + "&lat=" + lat + "&appid=" + MyAPIKey + "&units=metric";
			                    locationName= name.getString("name");
			                    country = name.getString("country");
	
			                    apiconnection(urlstring);
	
			                    jsonObject = new JSONObject(response.toString());		
			                    Thread.sleep(1);
		                    }

		                } catch (Exception ex) {
		                    ex.printStackTrace(); // print error sa console
		                    throw ex;  // Let SwingWorker handle the exception and display it later
		                }
		                return null;
		            }
		            
		            
		            //done method. pag tapos na yung doInBackground, ito naman gagawin nya. usually dito nilalagay yung pag magsshow ka na ng mga results, and yun yung ginawa namin
		            @Override
		            protected void done() {
		                loadingLabel.setVisible(false); // pag tapos na yung worker, hide the loading gif
		                
		                try {
		                    if (jsonObject == null) { // check kung walang nakuha na jsonObject
		                        throw new Exception("No valid weather data received.");
		                    }

		                    //MAIN & WIND OBJECTS: WHERE WE GET THE WEATHER, COUNTRY & WIND DATA
		                    JSONObject main = jsonObject.getJSONObject("main");
		                    JSONObject wind = jsonObject.getJSONObject("wind");

		                    //Para sa current weather. ang output ng json ay naka array, kaya nilagay muna namin sa jsonarray, then saka namin hinanap ang need namin kunin, which is yung main and young description ng weather.
		                    JSONArray weatherArray = jsonObject.getJSONArray("weather");
		                    JSONObject weatherObject = weatherArray.getJSONObject(0);
		                    String mainweather = weatherObject.getString("main"), desc = weatherObject.getString("description"), iconstring = weatherObject.getString("icon");
		                    descLabel.setText(desc.toUpperCase());

		                    //Icon ng current weather
		                    String icon = "https://openweathermap.org/img/wn/" + iconstring + "@2x.png";
		                    URL iconurl = new URL(icon);
		                    imageLabel.setIcon(new ImageIcon(iconurl));  // sets the weather icon

		                    //Para naman ito sa temperature and etc natin.
		                    double feelslike = main.getDouble("feels_like");
		                    double humidity = main.getDouble("humidity");
		                    double temperature = main.getDouble("temp");
		                    double mintemp = main.getDouble("temp_min");
		                    double maxtemp = main.getDouble("temp_max");
		                    double sealevel = main.getDouble("sea_level");
		                    double windspeed = wind.getDouble("speed");
		                    double winddirection = wind.getDouble("deg");

		                    //itong section naman na to ay ioutput na natin ang need nating data sa labels natin.
		                    feelslikelabel.setText("Feels like: " + feelslike + "Â°C");
		                    mainweatherlabel.setText("Current weather: " + mainweather);
		                    
		                    //pag gumamit tayo ng map, kukunin nya yung locationName. pag hindi, icocopy lang nya yung nakalagay sa jtextfield
		                    if (isMap) {
		                    	pinpointnamelabel.setText(locationName.toUpperCase());
		                    } else {
		                    	pinpointnamelabel.setText(location.getText().toUpperCase());
		                    }
		                    
		                    countrylabel.setText(country);
		                    seaLevellabel.setText("Sea Level: " + sealevel + " m");
		                    humidityLabel_1.setText("Humidity: " + humidity + "%");
		                    temperatureLabel_1.setText("Temperature: " + temperature + "°C");
		                    mintempLabel.setText("Minimum temp: " + mintemp + "°C");
		                    maxtempLabel.setText("Maximum temp: " + maxtemp + "°C");
		                    windspeedLabel.setText("Wind speed: " + windspeed);
		                    winddegLabel.setText("Wind direction: " + winddirection + "°");
		                    
		                    //pagfalse ng isMap. importante to dahil magttrue sya pag gumamit tayo ng jmapviewer. binalik natin sa false para pag textfield ang sunod na ginamit, di sya mag error
		                    isMap = false;
		                } catch (Exception ex) {
		                    ex.printStackTrace(); // Print error kung may nangyaring exception
		                    loadingLabel.setText("Error fetching data. Please check the location."); // display error sa label
		                }
		            }
		        };

		        worker.execute(); // irurun swingworker natin
		    }
		});
	}
	
	//function para sa ating api url
	public void apiconnection(String myurl) {
		try {
		URL url = new URL(myurl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        String inputLine;
        response = new StringBuilder();
        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
}